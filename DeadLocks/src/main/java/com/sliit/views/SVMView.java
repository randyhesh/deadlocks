/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sliit.views;

import com.sliit.svmanalysis.SvmAnalyser;
import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.ThresholdCurve;
import weka.core.Instances;
import weka.core.Utils;
import weka.gui.visualize.PlotData2D;
import weka.gui.visualize.ThresholdVisualizePanel;

/**
 *
 * @author Heshani
 */
public class SVMView extends javax.swing.JPanel {

    private String dataset;
    private String modal;

    /**
     * Creates new form SVMView
     */
    public SVMView() {
        initComponents();
    }

    public SVMView(String dataset, String modal) {
        this();
        this.dataset = dataset;
        this.modal = modal;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        svmPredictButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        conclutionText = new javax.swing.JTextArea();
        rouText = new javax.swing.JTextField();
        rocPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        svmPredictButton.setText("Predict");
        svmPredictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                svmPredictButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Area Under ROC : ");

        jLabel3.setText("Conclusion : ");

        conclutionText.setColumns(20);
        conclutionText.setForeground(new java.awt.Color(255, 0, 0));
        conclutionText.setRows(5);
        jScrollPane1.setViewportView(conclutionText);

        rocPanel.setBackground(new java.awt.Color(255, 255, 255));
        rocPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("The Area Under an ROC Curve"));
        rocPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rocPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(svmPredictButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rouText, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(svmPredictButton)
                        .addComponent(jLabel2)
                        .addComponent(rouText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rocPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void svmPredictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_svmPredictButtonActionPerformed
        SvmAnalyser svmAnalyser = new SvmAnalyser();
        System.out.println(dataset);
        double auROC = svmAnalyser.perfomeAnalysis(PredictorPanel.locationText.getText());
        rouText.setText(auROC + "");

        String conclusion = "";

        //excellent 
        if (auROC >= 0.9 && auROC <= 1) {
            conclusion = "Your Machine is Protected.\nSuspicious network traffic not detected.";

            //good
        } else if (auROC >= 0.8 && auROC <= 0.9) {
            conclusion = "Your Machine is Protected.\nSuspicious network traffic not detected.You might face network treats";

            //fair 
        } else if (auROC >= 0.7 && auROC <= 0.8) {
            conclusion = "Your Machine is Not Protected.\nSuspicious network traffic not detected.";

            //poor
        } else if (auROC >= 0.6 && auROC <= 0.7) {
            conclusion = "Your Machine is Highly Vulnerable.\nSuspicious network traffic detected.";

            //fail
        } else if (auROC >= 0.5 && auROC <= 0.6) {
            conclusion = "Your Machine is Highly Vulnerable for an Attack.\nYou will face network treats";
        } else {
            conclusion = "Your Machine is Attacked";
        }

        conclutionText.setText(conclusion);

        getRocCurve();

    }//GEN-LAST:event_svmPredictButtonActionPerformed

    void getRocCurve() {
        try {
            Instances data;
            data = new Instances(
                    new BufferedReader(new FileReader(PredictorPanel.modalText.getText())));
            data.setClassIndex(data.numAttributes() - 1);

            //train classifier
            Classifier cl = new NaiveBayes();
            Evaluation eval = new Evaluation(data);
            eval.crossValidateModel(cl, data, 10, new Random(1));

            // generate curve
            ThresholdCurve tc = new ThresholdCurve();
            int classIndex = 0;
            Instances result = tc.getCurve(eval.predictions(), classIndex);

            // plot curve
            ThresholdVisualizePanel vmc = new ThresholdVisualizePanel();
            vmc.setROCString("(Area under ROC = "
                    + Utils.doubleToString(tc.getROCArea(result), 4) + ")");
            vmc.setName(result.relationName());
            PlotData2D tempd = new PlotData2D(result);
            tempd.setPlotName(result.relationName());
            tempd.addInstanceNumberAttribute();
            // specify which points are connected
            boolean[] cp = new boolean[result.numInstances()];
            for (int n = 1; n < cp.length; n++) {
                cp[n] = true;
            }
            tempd.setConnectPoints(cp);
            // add plot
            vmc.addPlot(tempd);

            rocPanel.removeAll();
            rocPanel.add(vmc, "vmc", 0);
            rocPanel.revalidate();

        } catch (IOException ex) {
            Logger.getLogger(DataVisualizerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DataVisualizerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea conclutionText;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel rocPanel;
    private javax.swing.JTextField rouText;
    private javax.swing.JButton svmPredictButton;
    // End of variables declaration//GEN-END:variables
}
