/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sliit.views;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import jpcap.PacketReceiver;
import jpcap.packet.DatalinkPacket;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

/**
 *
 * @author Heshani
 */
public class TrafficAnalyserPanel extends javax.swing.JPanel implements PacketReceiver {

    private NetworkInterface selectedDevice;
    private String networkTraffic;

    /**
     * Creates new form trafficAnalyser
     */
    public TrafficAnalyserPanel() {
        initComponents();
    }

    public TrafficAnalyserPanel(NetworkInterface[] networkInterfaces, String deviceName) {
        this();

        for (int i = 0; i < networkInterfaces.length; i++) {

            if (networkInterfaces[i].name.equals(deviceName)) {
                selectedDevice = networkInterfaces[i];
                break;
            }
        }

        if (selectedDevice != null) {
            deviceLabel.setText(selectedDevice.name);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deviceLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        timeText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        trafficDisplayTextArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(905, 509));
        setMinimumSize(new java.awt.Dimension(905, 509));
        setPreferredSize(new java.awt.Dimension(905, 509));

        deviceLabel.setText("Select Device");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");

        jLabel1.setText("Time :");

        trafficDisplayTextArea.setColumns(20);
        trafficDisplayTextArea.setRows(5);
        jScrollPane1.setViewportView(trafficDisplayTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deviceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton)
                        .addGap(0, 594, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(deviceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton)
                    .addComponent(jLabel1)
                    .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        NetworkInterface[] dev = JpcapCaptor.getDeviceList();
        try {
            //openDevice(open specified device,man no of bytes captured at once,promiscous mode,timeout for capture in milliseconds)
            //-1 to continue capturing packets infinitely
            JpcapCaptor captor = JpcapCaptor.openDevice(dev[3], -1, false, 10000);

            networkTraffic = "Starting... \n";

            //processPacket() supports timeout and non blocking mode, no of captures -1 infinite captures
            captor.processPacket(-1, new TrafficAnalyserPanel());

            trafficDisplayTextArea.setText(networkTraffic);
            System.out.println(networkTraffic);
            captor.close();

        } catch (IOException ex) {
            Logger.getLogger(TrafficAnalyserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_startButtonActionPerformed

    @Override
    public void receivePacket(Packet packet) {

        //System.out.println(packet);
        networkTraffic += packet + "\n";

//        IPPacket ipPacket = (IPPacket) packet;
//
//        byte header[] = packet.header;
//        byte data[] = packet.data;
//        int caplen = packet.caplen;
//        DatalinkPacket datalink = packet.datalink;
//        int length = packet.len;
//        long sec = packet.sec;
//        long usec = packet.usec;
//
//        System.out.println("source ip " + ipPacket.src_ip + " " + ipPacket.src_ip.getHostAddress() + " " + ipPacket.src_ip.getHostName());
//        System.out.println("dest ip " + ipPacket.dst_ip + " " + ipPacket.dst_ip.getHostAddress() + " " + ipPacket.dst_ip.getHostName());
//        System.out.println("options " + ipPacket.options + " flow_label " + ipPacket.flow_label + " version " + ipPacket.version + " ident " + ipPacket.ident);
//        System.out.println("protocol " + ipPacket.protocol);
//        System.out.println("hop_limit " + ipPacket.hop_limit);
//        System.out.println("caplen " + caplen);
//        System.out.println("datalink " + datalink);
//        System.out.println("length " + length);
//        System.out.println("sec " + sec);
//        System.out.println("usec " + usec + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel deviceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField timeText;
    private javax.swing.JTextArea trafficDisplayTextArea;
    // End of variables declaration//GEN-END:variables

}
